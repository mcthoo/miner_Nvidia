/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package miningtest;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import static java.lang.Thread.sleep;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.io.IOUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author Thomas
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

static Miner miner_zcash = new Miner("Zcash","miner_ZCASH.lnk","miner_ZCASH.exe",false);
static Miner miner_bitcoingold = new Miner("BitcoinGold","miner_BITCOINGOLD.lnk","miner_BITCOINGOLD.exe",false);
static Miner miner_zencash = new Miner("Zencash","miner_ZENCASH.lnk","miner_ZENCASH.exe",false);
static Miner miner_zclassic = new Miner("Zclassic","miner_ZCLASSIC.lnk","miner_ZCLASSIC.exe",false);
static API suprnova_btg = new API("BitcoinGold","https://btg.suprnova.cc/index.php?page=api&action=","530ba92c360db0f0921c549ef3078360be9334018739671f7d59eef237f3d306");
static API suprnova_zcl = new API("Zclassic","https://zcl.suprnova.cc/index.php?page=api&action=","530ba92c360db0f0921c549ef3078360be9334018739671f7d59eef237f3d306");
static API suprnova_zen = new API("Zencash","https://zen.suprnova.cc/index.php?page=api&action=","530ba92c360db0f0921c549ef3078360be9334018739671f7d59eef237f3d306");
static API flypool_zec = new API("Zcash","https://api-zcash.flypool.org/miner/","t1WEJrsMh4egkbcoNL6As9DHFG2REQUJsdH");
static API bittrex_btc = new API("btcRequest","https://bittrex.com/api/v1.1/public/","");
static API whattomine = new API("whattomine","https://whattomine.com/coins.json?utf8=%E2%9C%93&adapt_q_280x=0&adapt_q_380=0&adapt_q_fury=0&adapt_q_470=0&adapt_q_480=3&adapt_q_570=0&adapt_q_580=0&adapt_q_vega56=0&adapt_q_vega64=0&adapt_q_750Ti=0&adapt_q_1050Ti=0&adapt_q_10606=0&adapt_q_1070=2&adapt_1070=true&adapt_q_1080=1&adapt_1080=true&adapt_q_1080Ti=0&factor[eth_hr]=83.3&factor[eth_p]=380.0&factor[gro_hr]=115.5&factor[gro_p]=410.0&factor[x11g_hr]=36.5&factor[x11g_p]=385.0&factor[cn_hr]=1580.0&factor[cn_p]=300.0&eq=true&factor[eq_hr]=1410.0&factor[eq_p]=500&factor[lrev2_hr]=117500.0&factor[lrev2_p]=410.0&factor[ns_hr]=3060.0&factor[ns_p]=460.0&factor[lbry_hr]=900.0&factor[lbry_p]=390.0&factor[bk2b_hr]=5350.0&factor[bk2b_p]=390.0&factor[bk14_hr]=8300.0&factor[bk14_p]=400.0&factor[pas_hr]=3130.0&factor[pas_p]=390.0&factor[skh_hr]=89.5&factor[skh_p]=390.0&factor[l2z_hr]=420.0&factor[l2z_p]=300.0&factor[cost]=0.085&sort=Profitability24&volume=10&revenue=current&factor[exchanges][]=&factor[exchanges][]=bitfinex&factor[exchanges][]=bittrex&factor[exchanges][]=poloniex&dataset=Main&commit=Calculate\n","");
static List<Coins> listCoins = new ArrayList<Coins>();
static List<Coins> listCoinsTried = new ArrayList<Coins>();
static List<Miner> listMiner = new ArrayList<Miner>();
static List<API> listAPI = new ArrayList<API>();
static List<log> log = new ArrayList<log>();
static int timeRefresh = 18000;
static String classement1="",classement2="",balance="", balance2="";
static float valbtc=0,valzcl=0,valbtg=0,valzec=0;
static long time_execute;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane3 = new javax.swing.JEditorPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane4 = new javax.swing.JEditorPane();
        jButton10 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setText("RUN ZCASH");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("STOP ZCASH");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("RUN BITCOINGOLD");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("STOP BITCOINGOLD");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jTextArea2ComponentAdded(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        jButton5.setText("Refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("30Sec");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("3Min");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox3.setText("10Min");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jCheckBox4.setText("30Min");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jCheckBox5.setText("1Heure");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        jScrollPane6.setViewportView(jEditorPane1);

        jScrollPane7.setViewportView(jEditorPane2);

        jScrollPane4.setViewportView(jEditorPane3);

        jScrollPane3.setViewportView(jEditorPane4);

        jButton10.setText("+");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox2)
                        .addGap(10, 10, 10)
                        .addComponent(jCheckBox3)
                        .addGap(10, 10, 10)
                        .addComponent(jCheckBox4)
                        .addGap(10, 10, 10)
                        .addComponent(jCheckBox5)
                        .addGap(18, 18, 18)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(jScrollPane7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton10))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButton6.setText("RUN ZENCASH");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("STOP ZENCASH");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("RUN ZCLASSIC");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("STOP ZCLASSIC");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel1.setText("Valeur BTC :");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel2.setText("Valeur ZCL :");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel3.setText("Valeur BTG :");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel4.setText("Valeur ZEC :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton3)
                            .addComponent(jButton6)
                            .addComponent(jButton8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton4)
                            .addComponent(jButton7)
                            .addComponent(jButton9)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            miner_zcash.setRun(true);
            System.out.println(miner_zcash.getName()+" run :"+miner_zcash.isRun());
            
            Runtime.getRuntime().exec("cmd /c start "+miner_zcash.getUrl());
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked


    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            miner_zcash.setRun(false);
            System.out.println(miner_zcash.getName()+" run :"+miner_zcash.isRun());
            
            Runtime.getRuntime().exec("cmd /c taskkill /im "+miner_zcash.getNameProcess()); // Il kill le miner.exe aussi du coup qui va de paire
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            miner_bitcoingold.setRun(true);
            System.out.println(miner_bitcoingold.getName()+" run :"+miner_bitcoingold.isRun());
            
            Runtime.getRuntime().exec("cmd /c start "+miner_bitcoingold.getUrl());
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            miner_bitcoingold.setRun(false);
            System.out.println(miner_bitcoingold.getName()+" run :"+miner_bitcoingold.isRun());
            
            Runtime.getRuntime().exec("cmd /c taskkill /im "+miner_bitcoingold.getNameProcess()); // Il kill le miner.exe aussi du coup qui va de paire
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void jTextArea2ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jTextArea2ComponentAdded

    }//GEN-LAST:event_jTextArea2ComponentAdded

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved

    }//GEN-LAST:event_formMouseMoved

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    // ProgressBar //
    long time_refresh = System.currentTimeMillis();
    long calcul = time_refresh-time_execute;
    jProgressBar1.setMaximum(timeRefresh);
    jProgressBar1.setMinimum(0);
    jProgressBar1.setValue((int) calcul);
    
    // Fin progressBar //
    String text="";
    String text2="Miner :";
    String text3="Time execute :";
        ListIterator<log> itz = log.listIterator();

            while(itz.hasNext()){
                log str = itz.next();
            text = text+str.toString()+"\n";
            }
    ListIterator<Miner> it = listMiner.listIterator();
            while(it.hasNext()){
                Miner st = it.next();
            text2 = text2+"\n"+st.getName()+" run: "+st.isRun();
            
            // Convert ms en heure minute seconde //
            	int ms = st.getTime();
                long millisecondes=ms%1000; 
		ms=ms/1000; 
		long secondes=ms%60; 
		 ms=ms/60; 
		long minutes=ms%60; 
		 ms=ms/60; 
		long heures=ms;
            if(minutes < 10)
            {
            text3 = text3+"\n"+st.getName()+" : "+heures+"h0"+minutes;
            }
            else
            {
            text3 = text3+"\n"+st.getName()+" : "+heures+"h"+minutes;
            }

          }    
    
    // Actualisation des balances //



    // Insertion des String dans l'application //
    jTextArea2.setText(text);        
    jTextArea1.setText(text2);
    jEditorPane3.setText(text3);
    jEditorPane1.setText(classement1);
    jEditorPane2.setText(classement2);
    jEditorPane4.setText(balance);
    jLabel1.setText("Valeur BTC: "+valbtc+"$");
    jLabel2.setText("Valeur ZCL: "+valzcl+"$");
    jLabel3.setText("Valeur BTG: "+valbtg+"$");
    jLabel4.setText("Valeur ZEC: "+valzec+"$");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
    jCheckBox1.setSelected(false);
    jCheckBox2.setSelected(true);
    jCheckBox3.setSelected(false);
    jCheckBox4.setSelected(false);
    jCheckBox5.setSelected(false);
    timeRefresh = 180000;
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
    jCheckBox1.setSelected(true);
    jCheckBox2.setSelected(false);
    jCheckBox3.setSelected(false);
    jCheckBox4.setSelected(false);
    jCheckBox5.setSelected(false);
    timeRefresh = 30000;
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
    jCheckBox1.setSelected(false);
    jCheckBox2.setSelected(false);
    jCheckBox3.setSelected(true);
    jCheckBox4.setSelected(false);
    jCheckBox5.setSelected(false);
    timeRefresh = 600000;
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
    jCheckBox1.setSelected(false);
    jCheckBox2.setSelected(false);
    jCheckBox3.setSelected(false);
    jCheckBox4.setSelected(true);
    jCheckBox5.setSelected(false);
    timeRefresh = 1800000;
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
    jCheckBox1.setSelected(false);
    jCheckBox2.setSelected(false);
    jCheckBox3.setSelected(false);
    jCheckBox4.setSelected(false);
    jCheckBox5.setSelected(true);
    timeRefresh = 6000000;
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            miner_zencash.setRun(true);
            System.out.println(miner_zencash.getName()+" run :"+miner_zencash.isRun());
            
            Runtime.getRuntime().exec("cmd /c start "+miner_zencash.getUrl());
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            miner_zencash.setRun(false);
            System.out.println(miner_zencash.getName()+" run :"+miner_zencash.isRun());
            
            Runtime.getRuntime().exec("cmd /c taskkill /im "+miner_zencash.getNameProcess()); // Il kill le miner.exe aussi du coup qui va de paire
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            miner_zclassic.setRun(true);
            System.out.println(miner_zclassic.getName()+" run :"+miner_zclassic.isRun());
            
            Runtime.getRuntime().exec("cmd /c start "+miner_zclassic.getUrl());
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            miner_zclassic.setRun(false);
            System.out.println(miner_zclassic.getName()+" run :"+miner_zclassic.isRun());
            
            Runtime.getRuntime().exec("cmd /c taskkill /im "+miner_zclassic.getNameProcess()); // Il kill le miner.exe aussi du coup qui va de paire
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
    if(jEditorPane4.getText().equals(balance))
    {
        jEditorPane4.setText(balance2);   
    }
    else
    {
        jEditorPane4.setText(balance);   
    }
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ParseException, IOException, InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);

            }
        });
        //miner_zcash.setApi();
        miner_zcash.setApi(flypool_zec);
        miner_zcash.setApi_valid(true);
        miner_zcash.setPayout(Float.parseFloat("0.01"));
        miner_bitcoingold.setApi(suprnova_btg);
        miner_bitcoingold.setApi_valid(true);
        miner_bitcoingold.setPayout(Float.parseFloat("0.01"));
        miner_zencash.setApi(suprnova_zen);
        miner_zencash.setApi_valid(true);
        miner_zencash.setPayout(Float.parseFloat("0.1"));
        miner_zclassic.setApi(suprnova_zcl);
        miner_zclassic.setApi_valid(true);
        miner_zclassic.setPayout(Float.parseFloat("0.1"));
        listMiner.add(miner_zcash);
        listMiner.add(miner_bitcoingold);              
        listMiner.add(miner_zencash);
        listMiner.add(miner_zclassic);
        listAPI.add(suprnova_zen);
        listAPI.add(suprnova_zcl);
        listAPI.add(suprnova_btg);
        listAPI.add(flypool_zec);
        String jsonString="";

    while(true){
        time_execute = 0;
        String value_btc = bittrex_btc.setJsonBittrex("getmarketsummary?market=usdt-btc", log);
        if(value_btc.equals(""))
        {
        }
        else{
        String valuesTemp[]  = value_btc.split(",");
        valbtc = Float.parseFloat(valuesTemp[6].replaceAll("\"", "").replaceAll(":", "").replaceAll("Last", ""));
        }

        jsonString = whattomine.setJsonWhattomine(log);
        if(jsonString.equals(""))
        {
            time_execute = System.currentTimeMillis();
            sleep(timeRefresh); // Retry dans TimeRefresh
        }
        else
        {
        balance ="";
        balance2 ="";
        Object obj = new JSONParser().parse(jsonString);
        JSONObject jo = (JSONObject) obj;

        // getting address
        Map coins = ((Map)jo.get("coins"));
         
        // iterating address Map
        Iterator<Map.Entry> itr1 = coins.entrySet().iterator();
        while (itr1.hasNext()) {
            Map.Entry pair = itr1.next();
            
            Coins newCoin = new Coins(pair.getKey().toString());
            
                Object obj1 = new JSONParser().parse((String) pair.getValue().toString());
                JSONObject jo1 = (JSONObject) obj1;
                
            // Print Name //    
            //System.out.println(pair.getKey());
            
            // ID //
            long id = (long) jo1.get("id");
            newCoin.setId((int) id);
            // TAG //
            String tag = (String) jo1.get("tag");
            newCoin.setTag(tag);
            // ALGO //
            String algorithm = (String) jo1.get("algorithm");
            newCoin.setAlgorithm(algorithm);
            // block_time //
            String block_time = jo1.get("block_time").toString();
            newCoin.setBlock_time(Float.parseFloat(block_time));
            // block_reward //
            String block_reward = jo1.get("block_reward").toString();
            newCoin.setBlock_reward(Float.parseFloat(block_reward));
            // block_reward24 //
            String block_reward24 = jo1.get("block_reward24").toString();
            newCoin.setBlock_reward24(Float.parseFloat(block_reward24));
            // last_block //
            String last_block = jo1.get("last_block").toString();
            newCoin.setLast_block(Integer.parseInt(last_block));
            // difficulty //
            String difficulty = jo1.get("difficulty").toString();
            newCoin.setDifficulty(Float.parseFloat(difficulty));
            // difficulty24 //
            String difficulty24 = jo1.get("difficulty24").toString();
            newCoin.setDifficulty24(Float.parseFloat(difficulty24));
            // nethash //
            String nethash = jo1.get("nethash").toString();
            newCoin.setNethash(Integer.parseInt(nethash));
            // exchange_rate //
            String exchange_rate = jo1.get("exchange_rate").toString();
            newCoin.setExchange_rate(Float.parseFloat(exchange_rate));
            // exchange_rate24 //
            String exchange_rate24 = jo1.get("exchange_rate24").toString();
            newCoin.setExchange_rate24(Float.parseFloat(exchange_rate24));
            // exchange_rate_vol //
            String exchange_rate_vol = jo1.get("exchange_rate_vol").toString();
            newCoin.setExchange_rate_vol(Float.parseFloat(exchange_rate_vol));
            // exchange_rate_curr //
            String exchange_rate_curr = jo1.get("exchange_rate_curr").toString();
            newCoin.setExchange_rate_curr(exchange_rate_curr);
            // market_cap //
            String market_cap = jo1.get("market_cap").toString();
            newCoin.setMarket_cap(market_cap);
            // estimated_rewards //
            String estimated_rewards = jo1.get("estimated_rewards").toString();
            newCoin.setEstimated_rewards(Float.parseFloat(estimated_rewards));
            // estimated_rewards24 //
            String estimated_rewards24 = jo1.get("estimated_rewards24").toString();
            newCoin.setEstimated_rewards24(Float.parseFloat(estimated_rewards24));
            // btc_revenue //
            String btc_revenue = jo1.get("btc_revenue").toString();
            newCoin.setBtc_revenue(Float.parseFloat(btc_revenue));
            // btc_revenue24 //
            String btc_revenue24 = jo1.get("btc_revenue24").toString();
            newCoin.setBtc_revenue24(Float.parseFloat(btc_revenue24));
            // profitability //
            String profitability = jo1.get("profitability").toString();
            newCoin.setProfitability(Integer.parseInt(profitability));
            // profitability24 //
            String profitability24 = jo1.get("profitability24").toString();
            newCoin.setProfitability24(Integer.parseInt(profitability24));
            // timestamp //
            String timestamp = jo1.get("timestamp").toString();
            newCoin.setTimestamp(Long.parseLong(timestamp));
            
            // Détection Miner //
            ListIterator<Miner> it = listMiner.listIterator();

            while(it.hasNext()){
                Miner str = it.next();
            // Get Miner au Coin //
                if(newCoin.getName().equals(str.getName())){
                    newCoin.setMiner(str);
                    newCoin.setMinerDispo(true);
               }
            }
            listCoins.add(newCoin);
        }

        // Fonction ressort le Best profit //
            Coins bestCoin = new Coins("Best");
            bestCoin.setBtc_revenue(0);
            ListIterator<Coins> itz = listCoins.listIterator();

            while(itz.hasNext()){
                Coins str = itz.next();
                if(str.getBtc_revenue()>=bestCoin.getBtc_revenue()){
                    if(str.isMinerDispo()){
                        //System.out.println(str.getName()+" >= "+bestCoin.getName()+": "+str.getBtc_revenue()+">="+bestCoin.getBtc_revenue()+"ok");
                        bestCoin = str;
                    }
                    else{
                        //System.out.println(str.getName()+" >= "+bestCoin.getName()+": "+str.getBtc_revenue()+">="+bestCoin.getBtc_revenue()+" BUT NO MINER");
                    }
               }
                else {
                    //System.out.println(str.getName()+" < "+bestCoin.getName()+": "+str.getBtc_revenue()+" < "+bestCoin.getBtc_revenue());
               }
            }
            
            if(!bestCoin.getMiner().isRun()){ // Si le processus n'est pas celui qui est en route ...
                // Kill tout les processus //
                ListIterator<Miner> it = listMiner.listIterator();

                while(it.hasNext()){
                    Miner str = it.next();
                    if(str.isRun()){
                str.setRun(false);
                log.add(new log(new Date(), str.getName()+" run :"+str.isRun()));
                Runtime.getRuntime().exec("cmd /c taskkill /im "+str.getNameProcess()); // Il kill le miner.exe aussi du coup qui va de paire
                    }

                }
                // Run le best Miner //
                bestCoin.getMiner().setRun(true);
                bestCoin.getMiner().setTime(bestCoin.getMiner().getTime()+timeRefresh);
                log.add(new log(new Date(), bestCoin.getMiner().getName()+" run :"+bestCoin.getMiner().isRun()));
                Runtime.getRuntime().exec("cmd /c start "+bestCoin.getMiner().getUrl());
           }
           else
            {
            log.add(new log(new Date(), "Again the best"));
            bestCoin.getMiner().setTime(bestCoin.getMiner().getTime()+timeRefresh);
            }
            // Fin fonction
            // Comparateur pour Trié LISTE //
            
    Comparator<Coins> comparator = Comparator.comparing(Coins::getBtc_revenue).thenComparing(Comparator.comparing(Coins::getBtc_revenue));
    listCoins.sort(comparator);
    String text="", text1="";
        ListIterator<Coins> itzz = listCoins.listIterator();
            while(itzz.hasNext()){
            Coins str = itzz.next();
            text = str.getName()+"\n"+text;
            double revenueTemp = (double)Math.round(str.getBtc_revenue()*valbtc*100)/100;
            text1 ="$ "+revenueTemp+"\n"+text1;
            // MAJ Valeur TOP 3 //
            if(str.getName().equals("Zclassic"))
            {
                float temp = (float)Math.round(str.getExchange_rate()*valbtc*1000)/1000;
                valzcl = temp;
            }
            if(str.getName().equals("BitcoinGold"))
            {
                float temp = (float)Math.round(str.getExchange_rate()*valbtc*1000)/1000;
                valbtg = temp;
            }
            if(str.getName().equals("Zcash"))
            {
                float temp = (float)Math.round(str.getExchange_rate()*valbtc*1000)/1000;
                valzec = temp;
            }
            //
            if(str.isMinerDispo()) // Si miner existe
            {
                if(str.getMiner().isApi_valid()) // Si API existe
                {
                    // Actualisation Balance //
                    String jsonApi = "";
                    if(str.getName().equals("Zcash")) // Pool Flypool
                    {
                    jsonApi = str.getMiner().getApi().setJsonFlypool(str.getMiner().getApi().getApi_key()+"/currentStats", log);
                     if(jsonApi.equals(""))
                        {
                        balance = "No data\n"+balance;
                        balance2 = "No data\n"+balance2;
                        }
                        else
                        {
                        String values[]  = jsonApi.split(",");
                        if(values.length >= 3)
                        {
                        float val1=0,val2=0, val=0;
                        val1 = Float.parseFloat(values[10].replace("}", "").replaceAll("\"", "").replaceAll(":", "").replaceAll("unpaid", ""));
                        if(values[11].replace("{", "").replaceAll("\"", "").replaceAll(":", "").replaceAll("unconfirmed", "").equals("null"))
                        {
                        val2 = 0;
                        }
                        else
                        {
                        val2 = Float.parseFloat(values[11].replace("{", "").replaceAll("\"", "").replaceAll(":", "").replaceAll("unconfirmed", ""));
                        }
                        
                        val = val1/100000000+val2/100000000;
                        DecimalFormat df = new DecimalFormat("0.########");
                        DecimalFormat df2 = new DecimalFormat("00.#");
                        balance = df.format(val1/100000000)+"(+"+df.format(val2/100000000)+")\n"+balance;
                        balance2 = df2.format(val*100/str.getMiner().getPayout())+"% - "+df.format(val)+"\n"+balance2;
                        }
                        else
                        {
                        balance = "No data\n"+balance;
                        balance2 = "No data\n"+balance2;
                        }
                        }
                    
                    }
                    else // Pool Suprnova
                    {
                    jsonApi = str.getMiner().getApi().setJsonSuprnova("getuserbalance", log);
                    
                        if(jsonApi.equals(""))
                        {
                        balance = "No data\n"+balance;
                        balance2 = "No data\n"+balance2;
                        }
                        else
                        {
                        String values[]  = jsonApi.split(",");
                        float val1=0,val2=0, val=0;

                        val1 = Float.parseFloat(values[2].replace("{", "").replaceAll("\"", "").replaceAll(":", "").replaceAll("data", "").replaceAll("confirmed", ""));
                        val2 = Float.parseFloat(values[3].replaceAll("\"", "").replaceAll(":", "").replaceAll("unconfirmed", ""));
                        val = val1+val2;
                        DecimalFormat df = new DecimalFormat("0.########");
                        DecimalFormat df2 = new DecimalFormat("00.#");
                        balance = df.format(val1)+"(+"+df.format(val2)+")\n"+balance;
                        balance2 = df2.format(val*100/str.getMiner().getPayout())+"% - "+df.format(val)+"\n"+balance2;
                        } // Si json est pas vide
                    }

                }
                else
                {
                balance = "No data\n"+balance;
                balance2 = "No data\n"+balance2;
                }
            }
            else
                {
                balance = "No data\n"+balance;
                balance2 = "No data\n"+balance2;
                }
            }
            // Fin comparateur //
    classement1 = "Rentabilité :\n"+text;
    classement2 = "\n"+text1;
    balance = "Balance :\n"+balance;
    balance2 = "Balance :\n"+balance2;
    listCoins.clear();
    time_execute = System.currentTimeMillis();
    sleep(timeRefresh);
    }
    }
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JEditorPane jEditorPane3;
    private javax.swing.JEditorPane jEditorPane4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
